<?php
/**
* This class is autogenerated by the Spapi class generator
* Date of generation: 2020-12-22
* Specification: ttps://github.com/amzn/selling-partner-api-models/blob/main/models/notifications-api-model/notifications.json
* Source MD5 signature: 5e165c1881f9de30cb31a5b9bedb9add
*
*
* Selling Partner API for Notifications
* The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.
*/
namespace Sxqibo\FastSpapi\Api;
use Sxqibo\FastSpapi\Client;

class Notifications extends Client {

  /**
  * Operation createSubscription
  *
  * @param string $notificationType The type of notification to which you want to subscribe.
  *
  * For more information about notification types, see the Notifications API Use Case Guide.
  *
  */
  public function createSubscription($notificationType, $body = [])
  {
    return $this->send("/notifications/v1/subscriptions/{$notificationType}", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation getSubscription
  *
  * @param string $notificationType The type of notification to which you want to subscribe.
  *
  * For more information about notification types, see the Notifications API Use Case Guide.
  *
  */
  public function getSubscription($notificationType)
  {
    return $this->send("/notifications/v1/subscriptions/{$notificationType}", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation deleteSubscriptionById
  *
  * @param string $subscriptionId The identifier for the subscription that you want to delete.
  * @param string $notificationType The type of notification to which you want to subscribe.
  *
  * For more information about notification types, see the Notifications API Use Case Guide.
  *
  */
  public function deleteSubscriptionById($subscriptionId, $notificationType)
  {
    return $this->send("/notifications/v1/subscriptions/{$notificationType}/{$subscriptionId}", [
      'method' => 'DELETE',
    ]);
  }

  /**
  * Operation getSubscriptionById
  *
  * @param string $subscriptionId The identifier for the subscription that you want to get.
  * @param string $notificationType The type of notification to which you want to subscribe.
  *
  * For more information about notification types, see the Notifications API Use Case Guide.
  *
  */
  public function getSubscriptionById($subscriptionId, $notificationType)
  {
    return $this->send("/notifications/v1/subscriptions/{$notificationType}/{$subscriptionId}", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation createDestination
  *
  */
  public function createDestination($body = [])
  {
    return $this->send("/notifications/v1/destinations", [
      'method' => 'POST',
      'json' => $body
    ]);
  }

  /**
  * Operation getDestinations
  *
  */
  public function getDestinations()
  {
    return $this->send("/notifications/v1/destinations", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation getDestination
  *
  * @param string $destinationId The identifier generated when you created the destination.
  *
  */
  public function getDestination($destinationId)
  {
    return $this->send("/notifications/v1/destinations/{$destinationId}", [
      'method' => 'GET',
    ]);
  }

  /**
  * Operation deleteDestination
  *
  * @param string $destinationId The identifier for the destination that you want to delete.
  *
  */
  public function deleteDestination($destinationId)
  {
    return $this->send("/notifications/v1/destinations/{$destinationId}", [
      'method' => 'DELETE',
    ]);
  }
}
